use serde::{Deserialize, Serialize};
use std::path::PathBuf;
use tracing::error;

use crate::monarch_utils::monarch_download::download_image;
use crate::monarch_utils::monarch_fs::path_exists;

#[derive(Serialize, Deserialize, Clone, Debug)]
pub struct MonarchGame {
    name: String,
    pub id: String, // Monach ID, generated by monarch-launcher.com
    pub platform: String,
    pub platform_id: String,
    executable_path: String,
    thumbnail_path: String,
    pub launch_args: String,
    pub compatibility: String,
    pub store_page: String,
}

impl MonarchGame {
    pub fn new(
        name: &str,
        id: i32,
        platform: &str,
        platform_id: &str,
        store_page: &str,
        exec_path: &str,
        thumbnail_path: &str,
    ) -> Self {
        Self {
            name: name.to_string(),
            id: id.to_string(),
            platform: platform.to_string(),
            platform_id: platform_id.to_string(),
            executable_path: exec_path.to_string(),
            thumbnail_path: thumbnail_path.to_string(),
            launch_args: String::new(),
            compatibility: String::new(),
            store_page: store_page.to_string(),
        }
    }

    /// Download thumbnail for MonarchGame
    pub async fn download_thumbnail(&self, url: String) {
        // TODO: Rewrite this function to query monarch-laucher.com
        // for images from igdb.com api.

        let path: PathBuf = PathBuf::from(&self.thumbnail_path);

        if path_exists(&path) {
            return;
        }

        /*
        * This is the previous solution that is faster to show the user the results
        * however it requires some sort of event to tell the frontend to refresh the
        * images.
        tokio::task::spawn(async move {
            if let Err(e) = download_image(&owned_url, &path).await {
                error!("monarchgame::download_thumbnail() -> {e}");
            }
        });
        */
        // Temporary solution for better image handling, which makes the
        // parsing of games slower.
        if let Err(e) = download_image(&url, &path).await {
            error!("monarchgame::download_thumbnail() -> {e}");
        }
    }
}

impl PartialEq for MonarchGame {
    fn eq(&self, other: &Self) -> bool {
        let platform = match self.platform.as_str() {
            "steamcmd" => "steam",
            _ => &self.platform,
        };

        let other_platform = match other.platform.as_str() {
            "steamcmd" => "steam",
            _ => &other.platform,
        };

        self.platform_id == other.platform_id && platform == other_platform
    }
}

impl Eq for MonarchGame {}

/// Struct representation of games returned from monarch-launcher.com
#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct MonarchWebGame {
    pub name: String,
    pub id: i32,
    pub platform: String,
    pub platform_id: String,
    pub store_page: String,
    pub cover_url: String,
    pub artwork_url: String,
}
